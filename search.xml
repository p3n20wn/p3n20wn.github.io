<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024-12-03-Kasaki-Nozomi&#39;s-Birthday</title>
    <url>/2024-12-03-Kasaki-Nozomi-s-Birthday/</url>
    <content><![CDATA[<span id="more"></span>

<p>伞哥哥生日快乐！！！🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂</p>
<p>又是一年。</p>
<p>Nozomi对我而言，意味着太多太多……</p>
<p>A Year，</p>
<p>对待学校whk态度的转变，</p>
<p>对待CTF态度的转变，</p>
<p>自己感兴趣方向的探索，</p>
<p>基本功的提升</p>
<p>……</p>
<p>希望明年的12.3，能够让所有的effort，都paid off~</p>
<p>Nozomi bless me~</p>
]]></content>
      <categories>
        <category>Most-Important</category>
      </categories>
      <tags>
        <tag>LIFE</tag>
      </tags>
  </entry>
  <entry>
    <title>Attack Team Anti-Tracing Guidelines</title>
    <url>/Attack-Team-Anti-Tracing-Guidelines/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个安全人员，反溯源是我们最基本的能力要求，同时也是一个黑客的精神向往。今年规则加入了一条“被防守方溯源到攻击队员、攻击资源” 扣3000分。更需要更加注重个人渗透习惯，故制定该准则给大家做个牵引。态度决定高度，细节成就大业。</p>
<h1 id="行为准则"><a href="#行为准则" class="headerlink" title="行为准则"></a>行为准则</h1><p><strong>一切的大前提：使用虚拟机进行渗透测试，使用win10英文版+英文版浏览器+打上全补丁</strong></p>
<h3 id="网络选择"><a href="#网络选择" class="headerlink" title="网络选择"></a>网络选择</h3><p>1.不允许使用公司出口网络进行渗透、不允许使用公司出口网络进行渗透、不允许使用公司出口网络进行渗透。</p>
<p>2.除监管单位要求，平时渗透不允许使用与公司相关网络进行渗透测试。</p>
<p>3.不允许使用公司无线进行渗透，如guest、sxf-5g等等与公司有关的无线网络。</p>
<p>4.<strong>使用物联网卡无线网络进行渗透</strong>。</p>
<h3 id="工作机"><a href="#工作机" class="headerlink" title="工作机"></a>工作机</h3><p>1.挂上全局代理之后才能开展渗透测试。<strong>配置代理软件掉线禁用网卡</strong>、个人匿名vps socks。   抓</p>
<p>2.<strong>注销所有一切浏览器登录会话</strong></p>
<p>3.虚拟机不能装网盘、聊天软件、VPN、office等软件，不留任何敏感信息在虚拟机里面，定期做好恢复快照。</p>
<p>4.浏览器关闭自动填充功能。</p>
<h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><p>1.渗透时网上下载的目标单位一切文件先放到另外一个“<strong>不出网的虚拟机</strong>”进行分析研判是否存在后门。</p>
<p>2.需要手机验证码注册使用的。使用网上的短信验证码接口注册，一定不能使用自己的个人手机号注册。</p>
<p>3.在测试微信公众号需要关注才能使用功能，尽量使用匿名微信关注后测试及在测试后取消关注。以免泄漏个人微信信息。</p>
<p>4.不使用默认冰蝎，使用去特征版冰蝎。蚁剑连接时必须更改aes等编码。</p>
<p>5.webshell上传后必须修改时间，与网站文件创建时间一致。</p>
<h3 id="个人敏感信息自查"><a href="#个人敏感信息自查" class="headerlink" title="个人敏感信息自查"></a>个人敏感信息自查</h3><p>1.互联网不留存真实的个人信息，比如脉脉、陌陌、探探、微博等社交软件</p>
<p>2.个人博客使用匿名身份证注册、匿名邮箱。vps放在国外。</p>
<h3 id="蜜罐判断"><a href="#蜜罐判断" class="headerlink" title="蜜罐判断"></a>蜜罐判断</h3><p>1.时刻谨记自己是否被爬入蜜罐。</p>
<p>2.github信息手机注意project更新节点，会有误导踩入蜜罐。</p>
<p>3.反蜜罐插件修改–因误报率较高修改</p>
<h3 id="钓鱼及后门"><a href="#钓鱼及后门" class="headerlink" title="钓鱼及后门"></a>钓鱼及后门</h3><p>1.钓鱼邮件直接发马的话，<strong>需要改程序图标</strong>、执行后释放正常文件，删除恶意文件。</p>
<p>2.Cobalt Strike一定要用CDN流量上线。通道与控制分离化</p>
<p>3.后门程序防被分析策略，执行需要加参数才能执行，参数不对(直接点击）或直接点击打开自动删除。避免上传到云能直接被分析及防守方人员逆向分析。</p>
<p>4.Cobalt Strike后门上线后，作为控制通道设置time.sleep大于500秒</p>
<p>5.工具去指纹及去个人信息，<strong>编程机器pdb调试信息不要带入个人 ID</strong></p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>1.本地工具尽量不能上传到服务器，工具必须去特征化。尽量使用在本地使用代理渗透。</p>
<p>2.frp尽量用命令化，不落地配置文件。</p>
<p>3.内网工具命令行化—端口扫描、弱口令扫描</p>
<p>4.关于内网扫描，不能上传自研工具到服务器。</p>
<p>5.ms17010使用前必须摸清网络架构、安全设备、防守方情况后，在根据不同场景使用。</p>
<p>6.上传的后门通道改名，比如svchost.exe&#x2F;putty.exe&#x2F;mysql.exe等，使用后删除。</p>
<p>7.内网比较大的情况下，尽量在10、172、192不同的段内建立通道。防止被干。</p>
<p>8.登陆3389不建议添加用户，建议激活guest。如若必须加账户，添加内网用户相关性的即可，避免使用诋毁友商词汇，如qaxNB，qianxin.com等词汇</p>
<p>9.渗透当天结束后一定要清理后门及业务系统日志及系统日志。</p>
]]></content>
      <categories>
        <category>PENTEST</category>
      </categories>
      <tags>
        <tag>PENTEST</tag>
      </tags>
  </entry>
  <entry>
    <title>How Ridiculous TOTOLINK X6000R Is</title>
    <url>/How-Ridiculous-TOTOLINK-X6000R-Is/</url>
    <content><![CDATA[<!--more-->

<p>​	When I surfing <code>https://gobies.org/updates</code> to see the newly updated vulnerabilities, I accidentally see a CVE of <code>D-LINK</code>, and goby give a way to search D-LINK products through <code>FOFA</code>.</p>
<p>​	Inspired by this, I immediately search <code>TOTOLINK</code>, which I am researching on but struggling to simulation. Luckily, I get one. :)</p>
<p>And this one is X6000R.</p>
<p>​	When I searched vulnerabilities of <code>X60000R</code> on CVE.org, I was astonished:</p>
<p><img src="/./How-Ridiculous-TOTOLINK-X6000R-Is/images/image-20241029175808268.png" alt="image-20241029175808268"></p>
<p>​	Uhhh? How can it be? What’s more ridiculous is that almost all of them are command execution vulnerabilities…</p>
<p>​	I review one of them … Emmm, what can i say :?</p>
<p>​	Vulnerability is in a shared library function…</p>
<p>​	<code>CsteSystem</code>:</p>
<p><img src="/./How-Ridiculous-TOTOLINK-X6000R-Is/images/image-20241029180018557.png" alt="image-20241029180018557"></p>
<p>​	</p>
<p>​	And most of functions like <code>Uci_xxx</code> called it…</p>
<p>​	Taking <code>Uci_Set_Str</code> for an example:</p>
<p>​	In binary file <code>usr/sbin/shttpd</code> called <code>Uci_Set_Str</code>:</p>
<p><img src="/./How-Ridiculous-TOTOLINK-X6000R-Is/images/image-20241029180111169.png" alt="image-20241029180111169"></p>
<p>And <code>Uci_Set_Str</code> is defined in <code>usr/lib/libcscommon.so</code>:</p>
<p><img src="/./How-Ridiculous-TOTOLINK-X6000R-Is/images/image-20241029180150041.png" alt="image-20241029180150041"></p>
<p>…</p>
<p>​	According to this idea, as long as there is a controllable input point of <code>Uci_Set_Str</code>, a system will be generated. . .</p>
<p>​	Oh my god. . .</p>
<p>​	I found that wherever there is a <code>Uci_xxx</code> function, there is basically a CsteSystem. . .</p>
<p>​	So I also took the opportunity to successfully find a bunch of vulnerabilities that have not yet been discovered and reported them to CVE. I hope I can get a number~</p>
<p><img src="/./How-Ridiculous-TOTOLINK-X6000R-Is/images/image-20241029180406740.png" alt="image-20241029180406740"></p>
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>Nothing To Say About sb college</title>
    <url>/Nothing-To-Say-About-sb-college/</url>
    <content><![CDATA[<span id="more"></span>

<p>What can i say?</p>
<p>md，网络空间安全学院。。。何为安全啊？</p>
<p>填奖填nm英语竞赛，数学建模。。。</p>
<p>真无语了。。。 真正搞安全的反而不受重视，我猜评审的也不懂吧。。。知道什么是CVE、CNVD、CNNVD吗？？？</p>
<p>最离谱的是，大四两个保pku的都没选上🤣，pku认可的你个sb学校不认可对吧？牛逼。。。</p>
<p>更加坚定了肯定不在本校继续待着的决心。对标着继续弄，主要是社会实践得大力搞一搞，然后像国赛、抢网这些国内办的，虽然比赛质量难说，但是是全国级别，还有证书的还是得认真弄一弄。</p>
<p>Eclipse first, the rest nowhere.</p>
<p>FORZA!</p>
]]></content>
  </entry>
  <entry>
    <title>Tomcat-PUT-upload-RCE-Analysis(CVE-2017-12615&amp;&amp;CVE-2024-50379)</title>
    <url>/Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/</url>
    <content><![CDATA[<!--more-->

<p>跟着这篇:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_63217130/article/details/144588392</span><br></pre></td></tr></table></figure>

<p>比较细的过了一遍，但是由于tomcat版本问题(也许?)没有成功拿到shell，但也记录下中间的一些关键漏洞代码点。</p>
<h2 id="CVE-2017-12615"><a href="#CVE-2017-12615" class="headerlink" title="CVE-2017-12615"></a>CVE-2017-12615</h2><p>整体还是采用idea搭tomcat的结构：<img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225172925778.png" alt="image-20241225172925778"></p>
<p>我这里是 tomcat-9.0.95</p>
<p>以前复现2017那个CVE的时候，没有去关注原因。</p>
<p>这次看了下，在这里：</p>
<p>tomcat的  conf&#x2F;web.xml里面的servlet映射配置：</p>
<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225173040830.png" alt="image-20241225173040830"></p>
<p>如果我们的路径不能被</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.jsp</span><br><span class="line">*.jspx</span><br></pre></td></tr></table></figure>

<p>匹配，就会用default servlet去处理，看tomcat源码，看到其中跟PUT相关的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/apache/tomcat/blob/main/java/org/apache/catalina/servlets/DefaultServlet.java#L582</span><br></pre></td></tr></table></figure>

<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225173240631.png" alt="image-20241225173240631"></p>
<p>可以看到，这里需要<code>isReadOnly</code>为False，而这个isReadOnly需要在这里配置：</p>
<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225173558354.png" alt="image-20241225173558354"></p>
<p>这样配置后，我们</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /CVE_2024_50379_war_exploded/test4.Jsp HTTP/1.1</span><br><span class="line">Host: 192.168.37.129:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">DNT: 1</span><br><span class="line">Sec-GPC: 1</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: JSESSIONID=EAADA5DD7720E932566B3FD263496B9D</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=1</span><br><span class="line">Content-Length: 161</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  $END$</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>就能成功上传test4.Jsp文件到web目录下了，</p>
<p>注意这里不能用jsp，jspx后缀，可以用大小写这些特性，(哦，突然想到为什么复现不成功了，。。。)大小写用的是Windows对文件后缀名不敏感的特性。。。而我的idea是装在Ubuntu里的。。。难绷。。。</p>
<p>这里可以看到确实上传成功了：</p>
<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225173844912.png" alt="image-20241225173844912"></p>
<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225173853953.png" alt="image-20241225173853953"></p>
<p>理论上，在Windows下，就可以访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/test4.Jsp</span><br></pre></td></tr></table></figure>

<p>来执行jsp代码了。</p>
<h2 id="CVE-2024-50379"><a href="#CVE-2024-50379" class="headerlink" title="CVE-2024-50379"></a>CVE-2024-50379</h2><p>这个在前几天chantin的公众号推了，也是一个比较大的洞，利用<strong>多线程并发PUT</strong>传这个改了后缀名的jsp，利用Windows等服务器对大小写不敏感，最终导致RCE。</p>
<p>具体原因应该得细看下源码，是不是有什么临时文件之类的缓存操作？</p>
<p>哦，其实具体看这个修复的commit大概就懂了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/apache/tomcat/commit/43b507ebac9d268b1ea3d908e296cc6e46795c00#diff-76c0332086740f8f2f26d8771efb9aa05329402cb83d0ed2f38cf10f55ac5b57R305</span><br></pre></td></tr></table></figure>

<p>修复是对同一文件的PUT这些操作上锁，防止并发绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fix inconsistent resource metadata with current GET and PUT/DELETE</span><br><span class="line">Concurrent reads and writes (e.g. HTTP GET and PUT / DELETE) for the</span><br><span class="line">same path cause corruption of the FileResource where some of the fields</span><br><span class="line">are set as if the file exists and some as set as if it does not.</span><br></pre></td></tr></table></figure>

<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225175454396.png" alt="image-20241225175454396"></p>
<p>后面也有类似的。</p>
<p>处理了 READ，WRITE，DELETE三个操作的lock问题。</p>
<p>看起来是修了罢，但说不准又被bypass了）</p>
<hr>
<p>但话说回来，还是没看到这个inconsistency在哪儿啊？？？</p>
<p>终于找到一篇：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.yxfzedu.com/article/12035</span><br></pre></td></tr></table></figure>



<p>果然，还是Windows的问题：</p>
<blockquote>
<p>这是JDK 1.8 java.io.File#getCanonicalPath 方法在Windows上的表现。Tomcat的这个漏洞也正是利用了这个特点。</p>
</blockquote>
<p>这里找了个9的版本的源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/apache/tomcat/blob/9.0.x/java/org/apache/catalina/webresources/AbstractFileResourceSet.java#L92</span><br></pre></td></tr></table></figure>



<p>这个getCanonicalPath方法，会将我们PUT上传的 poc.JSP得到的canPath转为小写的 poc.jsp</p>
<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225180743520.png" alt="image-20241225180743520"></p>
<blockquote>
<p>然后回到上层getResource方法中，第116行判断文件是否存在</p>
</blockquote>
<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225180911247.png" alt="image-20241225180911247"></p>
<p>这个小写是来自之前的canPath的小写，而Windows上，后缀大小写不敏感，所以这个f.exists会过掉，进入后续的操作。</p>
<p>但为什么说要并发竞争PUT呢？</p>
<blockquote>
<p>为什么再过几秒之后就无法触发了呢？因为过了这个时间差之后，file.getCanonicalPath 获取的值就变为了 *.JSP 大写结尾的路径，但调用 file.getAbsolutePath() 方法依然会返回 *.jsp 小写结尾的路径，于是 file 方法第138行的equals方法会返回false，再取反为true，于是执行到145行返回一个null：</p>
</blockquote>
<p><img src="/./Tomcat-PUT-upload-RCE-Analysis-CVE-2017-12615-CVE-2024-50379/images/image-20241225181103080.png" alt="image-20241225181103080"></p>
<p>我只能说，奇怪的Windows实现。。。file.getCanonicalPath同一个方法，几秒钟的差异，会导致返回相反的结果。。。</p>
<hr>
<p>写在最后。</p>
<p>这算是第一次真的跟着复现了一遍Java的CVE罢。。</p>
]]></content>
      <categories>
        <category>Java-Sec</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
